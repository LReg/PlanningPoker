version: '3.4'
services:
  backend:
    container_name: ${CONTAINER_NAME}-Backend
    restart: always
    image: ${IMAGE_NAME}backend
    environment:
      - DOMAIN=${DOMAIN}
      - BACKEND_PORT=${BACKEND_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/socket.io`))"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.tls=true"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.middlewares=pokerBackendStripPrefix"
      - "traefik.http.middlewares.${TRAEFIK_MIDDLEWARE}.stripprefix.prefixes=/api"
    build:
      target: backend
      dockerfile: Dockerfile
      context: .
    networks:
      - ${TRAEFIK_NETWORK}
  frontend:
    restart: always
    container_name: ${CONTAINER_NAME}-Frontend
    image: ${IMAGE_NAME}frontend
    build:
      target: frontend
      dockerfile: Dockerfile
      context: .
      args:
        - TRAEFIK=${TRAEFIK}
        - DOMAIN=${DOMAIN}
        - PROTOCOL=${PROTOCOL}
        - PRODUCTION=${PRODUCTION}
        - BACKEND_PORT=${BACKEND_PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.entrypoints=${TRAEFIK_ENTRYPOINT}"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.tls=true"
      - "traefik.http.routers.${TRAEFIK_ROUTER}.tls.certresolver=${TRAEFIK_CERT_RESOLVER}"
    networks:
      - ${TRAEFIK_NETWORK}
networks:
  ${TRAEFIK_NETWORK}:
    external: true